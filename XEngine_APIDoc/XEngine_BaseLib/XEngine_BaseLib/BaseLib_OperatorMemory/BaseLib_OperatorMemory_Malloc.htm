<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>BaseLib_OperatorMemory_Malloc</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<H1>函数</H1>
<P>BaseLib_OperatorMemory_Malloc</P>
<H1>功能</H1>
<P>三级指针内存申请</P>
<H1>
语法 
</H1>
<P>
  
BOOL
  
BaseLib_OperatorMemory_Malloc(VOID * **pppszPoint, size_t nCount, size_t nSize)

</P>
<P></P>
<P ></P>
<H1 >
  参数</H1>

<P>&nbsp;参数.一：pppszPoint<BR>&nbsp; In/Out：Out<BR>&nbsp; 
类型：三级指针<BR>&nbsp; 可空：N<BR>&nbsp; 
意思：输出申请好的内存,内存会被初始化为0<BR>&nbsp;参数.二：nCount<BR>&nbsp; In/Out：In<BR>&nbsp; 
类型：整数型<BR>&nbsp; 可空：N<BR>&nbsp; 意思：输入列表个数<BR>&nbsp;参数.三：nSize<BR>&nbsp; 
In/Out：In<BR>&nbsp; 类型：整数型<BR>&nbsp; 可空：N<BR>&nbsp; 意思：输入元素大小</P>
<P></P>
<H1>返回值</H1>
<P>类型：逻辑型<BR>意思：是否成功</P>
<H1>备注</H1>
<P>用来处理一些特殊导出参数和输入参数.可作为list的代替</P>
<H1>示例</H1>
<DIV 
style="FONT-SIZE: 12px; FONT-FAMILY: Consolas, 'Courier New', monospace; WHITE-SPACE: pre; FONT-WEIGHT: normal; COLOR: #000000; LINE-HEIGHT: 16px; BACKGROUND-COLOR: #fffffe">
<DIV><SPAN style="COLOR: #0000ff">int</SPAN><SPAN style="COLOR: #000000"> 
test_Memory()</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">{</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">int</SPAN><SPAN style="COLOR: #000000">** 
ppIntArray;</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">if</SPAN><SPAN style="COLOR: #000000"> 
(!BaseLib_OperatorMemory_Malloc((</SPAN><SPAN 
style="COLOR: #0000ff">void</SPAN><SPAN 
style="COLOR: #000000">***)&amp;ppIntArray, </SPAN><SPAN 
style="COLOR: #09885a">3</SPAN><SPAN style="COLOR: #000000">, </SPAN><SPAN 
style="COLOR: #0000ff">sizeof</SPAN><SPAN style="COLOR: #000000">(</SPAN><SPAN 
style="COLOR: #0000ff">int</SPAN><SPAN style="COLOR: #000000">)))</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;{</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">return</SPAN><SPAN style="COLOR: #000000"> -</SPAN><SPAN 
style="COLOR: #09885a">1</SPAN><SPAN style="COLOR: #000000">;</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">for</SPAN><SPAN style="COLOR: #000000"> (</SPAN><SPAN 
style="COLOR: #0000ff">int</SPAN><SPAN style="COLOR: #000000"> i = </SPAN><SPAN 
style="COLOR: #09885a">0</SPAN><SPAN style="COLOR: #000000">; i &lt; 
</SPAN><SPAN style="COLOR: #09885a">3</SPAN><SPAN style="COLOR: #000000">; 
i++)</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;{</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*(ppIntArray[i]) 
= i;</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">for</SPAN><SPAN style="COLOR: #000000"> (</SPAN><SPAN 
style="COLOR: #0000ff">int</SPAN><SPAN style="COLOR: #000000"> i = </SPAN><SPAN 
style="COLOR: #09885a">0</SPAN><SPAN style="COLOR: #000000">; i &lt; 
</SPAN><SPAN style="COLOR: #09885a">3</SPAN><SPAN style="COLOR: #000000">; 
i++)</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;{</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(</SPAN><SPAN 
style="COLOR: #a31515">"%d\n"</SPAN><SPAN style="COLOR: #000000">, 
*(ppIntArray[i]));</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;BaseLib_OperatorMemory_Free((</SPAN><SPAN 
style="COLOR: #0000ff">void</SPAN><SPAN 
style="COLOR: #000000">***)&amp;ppIntArray, </SPAN><SPAN 
style="COLOR: #09885a">3</SPAN><SPAN style="COLOR: #000000">);</SPAN></DIV><BR>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;CHAR** 
ppszStr;</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">if</SPAN><SPAN style="COLOR: #000000"> 
(!BaseLib_OperatorMemory_Malloc((</SPAN><SPAN 
style="COLOR: #0000ff">void</SPAN><SPAN style="COLOR: #000000">***)&amp;ppszStr, 
</SPAN><SPAN style="COLOR: #09885a">3</SPAN><SPAN style="COLOR: #000000">, 
</SPAN><SPAN style="COLOR: #09885a">6</SPAN><SPAN 
style="COLOR: #000000">))</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;{</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">return</SPAN><SPAN style="COLOR: #000000"> -</SPAN><SPAN 
style="COLOR: #09885a">1</SPAN><SPAN style="COLOR: #000000">;</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">for</SPAN><SPAN style="COLOR: #000000"> (</SPAN><SPAN 
style="COLOR: #0000ff">int</SPAN><SPAN style="COLOR: #000000"> i = </SPAN><SPAN 
style="COLOR: #09885a">0</SPAN><SPAN style="COLOR: #000000">; i &lt; 
</SPAN><SPAN style="COLOR: #09885a">3</SPAN><SPAN style="COLOR: #000000">; 
i++)</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;{</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcpy(ppszStr[i], 
</SPAN><SPAN style="COLOR: #a31515">"hello"</SPAN><SPAN 
style="COLOR: #000000">);</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">for</SPAN><SPAN style="COLOR: #000000"> (</SPAN><SPAN 
style="COLOR: #0000ff">int</SPAN><SPAN style="COLOR: #000000"> i = </SPAN><SPAN 
style="COLOR: #09885a">0</SPAN><SPAN style="COLOR: #000000">; i &lt; 
</SPAN><SPAN style="COLOR: #09885a">3</SPAN><SPAN style="COLOR: #000000">; 
i++)</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;{</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(</SPAN><SPAN 
style="COLOR: #a31515">"%s\n"</SPAN><SPAN style="COLOR: #000000">, 
ppszStr[i]);</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;BaseLib_OperatorMemory_Free((</SPAN><SPAN 
style="COLOR: #0000ff">void</SPAN><SPAN style="COLOR: #000000">***)&amp;ppszStr, 
</SPAN><SPAN style="COLOR: #09885a">3</SPAN><SPAN 
style="COLOR: #000000">);</SPAN></DIV><BR>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">typedef</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN 
style="COLOR: #0000ff">struct</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;{</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">int</SPAN><SPAN style="COLOR: #000000"> a;</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">int</SPAN><SPAN style="COLOR: #000000"> b;</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;}XENGINE_MEMORY;</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;XENGINE_MEMORY** 
ppSt_Memory;</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;BaseLib_OperatorMemory_Malloc((XPPPMEM)&amp;ppSt_Memory, 
</SPAN><SPAN style="COLOR: #09885a">3</SPAN><SPAN style="COLOR: #000000">, 
</SPAN><SPAN style="COLOR: #0000ff">sizeof</SPAN><SPAN 
style="COLOR: #000000">(XENGINE_MEMORY));</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">for</SPAN><SPAN style="COLOR: #000000"> (</SPAN><SPAN 
style="COLOR: #0000ff">int</SPAN><SPAN style="COLOR: #000000"> i = </SPAN><SPAN 
style="COLOR: #09885a">0</SPAN><SPAN style="COLOR: #000000">; i &lt; 
</SPAN><SPAN style="COLOR: #09885a">3</SPAN><SPAN style="COLOR: #000000">; 
i++)</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;{</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ppSt_Memory[i]-&gt;a 
= </SPAN><SPAN style="COLOR: #09885a">1</SPAN><SPAN 
style="COLOR: #000000">;</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ppSt_Memory[i]-&gt;b 
= i;</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">for</SPAN><SPAN style="COLOR: #000000"> (</SPAN><SPAN 
style="COLOR: #0000ff">int</SPAN><SPAN style="COLOR: #000000"> i = </SPAN><SPAN 
style="COLOR: #09885a">0</SPAN><SPAN style="COLOR: #000000">; i &lt; 
</SPAN><SPAN style="COLOR: #09885a">3</SPAN><SPAN style="COLOR: #000000">; 
i++)</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;{</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(</SPAN><SPAN 
style="COLOR: #a31515">"%d %d\n"</SPAN><SPAN style="COLOR: #000000">, 
ppSt_Memory[i]-&gt;a, ppSt_Memory[i]-&gt;b);</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></DIV>
<DIV><SPAN 
style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;BaseLib_OperatorMemory_Free((</SPAN><SPAN 
style="COLOR: #0000ff">void</SPAN><SPAN 
style="COLOR: #000000">***)&amp;ppSt_Memory, </SPAN><SPAN 
style="COLOR: #09885a">3</SPAN><SPAN style="COLOR: #000000">);</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
style="COLOR: #0000ff">return</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN 
style="COLOR: #09885a">0</SPAN><SPAN style="COLOR: #000000">;</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">}</SPAN></DIV></DIV></body>
</html>
