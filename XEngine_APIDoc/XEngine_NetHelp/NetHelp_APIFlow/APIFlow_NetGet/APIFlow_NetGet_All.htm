<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>APIFlow_NetGet_All</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<H1>
函数 
</H1>
<P>
APIFlow_NetGet_All

</P>
<H1>功能</H1>
<P >
 获取网络流量信息</P>
<H1 >
  语法</H1>

<P>BOOL APIFlow_NetGet_All(XSOCKET_FLOWSTATE 
*pSt_FlowState,LPCSTR lpszDevName = NULL,int nNumEntries = 0)</P> 
 <P>             </P>
<P></P>
<H1>参数</H1>
<P>&nbsp; 参数.一：pSt_FlowState<BR>&nbsp;&nbsp; In/Out：Out<BR>&nbsp;&nbsp; 
类型：数据结构指针<BR>&nbsp;&nbsp; 可空：N<BR>&nbsp;&nbsp; 意思：网络流量信息结构体<BR>&nbsp; 
参数.二：lpszEth_Name<BR>&nbsp;&nbsp; In/Out：In<BR>&nbsp;&nbsp; 类型：常量字符指针<BR>&nbsp;&nbsp; 
可空：Y<BR>&nbsp;&nbsp; 意思：要获取的网卡名称，比如：eth0<BR>&nbsp; 参数.三：nNumEntries<BR>&nbsp;&nbsp; 
In/Out：In<BR>&nbsp;&nbsp; 类型：整数型<BR>&nbsp;&nbsp; 可空：Y<BR>&nbsp;&nbsp; 
意思：要获取的网卡编号</P>
<P></P>
<H1>返回值</H1>
<P>类型：逻辑型<BR>意思：是否成功</P>
<H1>备注</H1>
<P>最后两个参数不能同时为空,每秒获取一次,这一次减去上一次的流量就得到当前每秒流量</P>
<H1>示例</H1>
<DIV 
style="FONT-SIZE: 12px; FONT-FAMILY: Consolas, 'Courier New', monospace; WHITE-SPACE: pre; FONT-WEIGHT: normal; COLOR: #000000; LINE-HEIGHT: 16px; BACKGROUND-COLOR: #fffffe">
<DIV><SPAN style="COLOR: #000000">
<DIV 
style="FONT-SIZE: 12px; FONT-FAMILY: Consolas, 'Courier New', monospace; WHITE-SPACE: pre; FONT-WEIGHT: normal; COLOR: #000000; LINE-HEIGHT: 16px; BACKGROUND-COLOR: #fffffe">
<DIV><SPAN style="COLOR: #000000">
<DIV 
style="FONT-SIZE: 12px; FONT-FAMILY: Consolas, 'Courier New', monospace; WHITE-SPACE: pre; FONT-WEIGHT: normal; COLOR: #000000; LINE-HEIGHT: 16px; BACKGROUND-COLOR: #fffffe">
<DIV><SPAN style="COLOR: #0000ff">int</SPAN><SPAN style="COLOR: #000000"> 
Test_NetFlow()</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">{</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #008000">//网络流量</SPAN><BR></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000ff">for</SPAN><SPAN style="COLOR: #000000"> 
(</SPAN><SPAN style="COLOR: #0000ff">int</SPAN><SPAN 
style="COLOR: #000000"> i = </SPAN><SPAN 
style="COLOR: #09885a">0</SPAN><SPAN style="COLOR: #000000">; i &lt; </SPAN><SPAN style="COLOR: #09885a">2</SPAN><SPAN style="COLOR: #000000">; 
i++)</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;{</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NETXAPI_FLOWSTATE 
st_FlowState;</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memset(&amp;st_FlowState, 
</SPAN><SPAN style="COLOR: #a31515">'</SPAN><SPAN 
style="COLOR: #000000">\</SPAN><SPAN style="COLOR: #09885a">0</SPAN><SPAN style="COLOR: #a31515">'</SPAN><SPAN style="COLOR: #000000">, 
</SPAN><SPAN style="COLOR: #0000ff">sizeof</SPAN><SPAN 
style="COLOR: #000000">(NETXAPI_FLOWSTATE));</SPAN></DIV><BR>
<DIV><SPAN style="COLOR: #0000ff">#ifdef</SPAN><SPAN style="COLOR: #000000"> _WINDOWS</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NetXApi_NetFlow_GetAll(&amp;st_FlowState, 
</SPAN><SPAN style="COLOR: #a31515">"Realtek PCIe GBE Family 
Controller"</SPAN><SPAN style="COLOR: #000000">);</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></DIV>
<DIV><SPAN style="COLOR: #0000ff">#else</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NetXApi_NetFlow_GetAll(&amp;st_FlowState, 
</SPAN><SPAN style="COLOR: #a31515">"ens33"</SPAN><SPAN 
style="COLOR: #000000">);</SPAN></DIV>
<DIV><SPAN style="COLOR: #0000ff">#endif</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(</SPAN><SPAN 
style="COLOR: #a31515">"Send:%llu Recv:%llu\n"</SPAN><SPAN 
style="COLOR: #000000">, 
st_FlowState.st_SendPackets.ullBytes, 
st_FlowState.st_RecvPackets.ullBytes);</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::this_thread::sleep_for(std::chrono::seconds(</SPAN><SPAN 
style="COLOR: #09885a">1</SPAN><SPAN style="COLOR: #000000">));</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000ff">return</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #09885a">0</SPAN><SPAN style="COLOR: #000000">;</SPAN></DIV>
<DIV><SPAN style="COLOR: #000000">}</SPAN></DIV></DIV></SPAN></DIV></DIV></SPAN></DIV></DIV></body>
</html>
